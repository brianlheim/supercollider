#line 2 "lex.scdoc.cpp"

#line 4 "lex.scdoc.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scdoc_create_buffer
#define yy_delete_buffer scdoc_delete_buffer
#define yy_flex_debug scdoc_flex_debug
#define yy_init_buffer scdoc_init_buffer
#define yy_flush_buffer scdoc_flush_buffer
#define yy_load_buffer_state scdoc_load_buffer_state
#define yy_switch_to_buffer scdoc_switch_to_buffer
#define yyin scdocin
#define yyleng scdocleng
#define yylex scdoclex
#define yylineno scdoclineno
#define yyout scdocout
#define yyrestart scdocrestart
#define yytext scdoctext
#define yywrap scdocwrap
#define yyalloc scdocalloc
#define yyrealloc scdocrealloc
#define yyfree scdocfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scdocrestart(scdocin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scdocleng;

extern FILE *scdocin, *scdocout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE scdoclex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-scdoclineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < scdocleng; ++yyl )\
                    if ( scdoctext[yyl] == '\n' )\
                        --scdoclineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scdoctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scdocrestart()), so that the user can continue scanning by
	 * just pointing scdocin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scdoctext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scdocleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scdocwrap()'s to do buffer switches
 * instead of setting up a fresh scdocin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scdocrestart (FILE *input_file  );
void scdoc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scdoc_create_buffer (FILE *file,int size  );
void scdoc_delete_buffer (YY_BUFFER_STATE b  );
void scdoc_flush_buffer (YY_BUFFER_STATE b  );
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scdocpop_buffer_state (void );

static void scdocensure_buffer_stack (void );
static void scdoc_load_buffer_state (void );
static void scdoc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scdoc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scdoc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scdoc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scdoc_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scdocalloc (yy_size_t  );
void *scdocrealloc (void *,yy_size_t  );
void scdocfree (void *  );

#define yy_new_buffer scdoc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scdocwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scdocin = (FILE *) 0, *scdocout = (FILE *) 0;

typedef int yy_state_type;

extern int scdoclineno;

int scdoclineno = 1;

extern char *scdoctext;
#define yytext_ptr scdoctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scdoctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scdocleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1278] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  108,   66,   55,   48,
       56,   64,   66,   50,   67,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   67,   66,   65,   54,   47,   67,   64,   67,   54,
       46,   56,   67,   89,   89,   85,   56,   86,   88,   90,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   90,  106,  106,   56,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,   56,  106,
      106,   62,   60,   61,   56,   58,   62,   50,   58,   55,

        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   49,   64,   45,   50,   41,    0,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,    0,    0,    0,   44,
       65,   47,   64,    0,    0,    0,    0,   89,   89,   86,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       86,   88,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      104,    0,    0,   60,   60,   58,    0,   58,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   45,    0,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   52,   53,

       51,   44,   42,    0,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,   59,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   43,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,   63,   63,   63,   63,    0,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,    0,    0,
       63,    0,   63,   63,   63,   63,   63,   63,    0,   63,
       63,   63,   63,   63,   63,   63,   63,    0,   63,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   63,   63,   63,    0,   63,
       63,   35,   63,   63,   63,   63,   63,   63,   63,    0,
       63,   63,   29,   21,   63,   28,   63,   63,   63,   63,
       63,   63,   32,   63,   63,   63,   63,   63,    0,   63,
        0,   22,   63,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   87,    0,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,   63,    1,   63,   63,   35,   39,   63,   63,   63,
       63,   63,   63,   63,   31,   63,   63,   29,   21,    0,
       28,   63,   63,   63,   63,   63,   63,   32,    0,   63,
       63,   63,   63,   25,   63,    2,   22,   63,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   87,   68,   87,   87,   87,   87,   87,
       87,   87,    0,   87,   87,   87,   87,   87,   87,   69,
        0,    0,    0,    0,    0,    0,   98,  102,    0,    0,
        0,    0,   94,    0,    0,   92,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   30,   63,   63,    1,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   31,   63,    0,   13,   63,    0,

       63,    0,    0,    0,   33,   63,   63,    0,   63,   25,
       63,    2,    0,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   87,   68,   87,
       87,   87,   87,   87,   87,    0,   80,    0,   87,    0,
        0,   87,    0,   69,    0,    0,   93,    0,    0,    0,
        0,    0,    0,    0,   94,    0,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,    0,   63,   63,   63,   63,
       63,   63,   63,    0,    0,    0,   63,    8,   13,   63,

        9,    0,    4,   19,   10,   33,   63,   63,    3,   63,
        0,   27,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   87,   87,   87,   87,   87,    0,   87,   75,   80,
       76,    0,   71,   77,   87,   70,    0,   93,    0,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,   63,   63,    0,   63,
       63,   63,   63,   34,   18,   26,   63,    8,   63,    9,
        6,    4,   19,   10,    0,   63,    3,   63,   36,   27,
       89,   89,   89,   89,   89,   89,   89,   87,   87,    0,

       87,   87,   84,   87,   75,   76,   73,   71,   77,   87,
       70,    0,    0,    0,    0,    0,   97,    0,    0,    0,
        0,   99,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   14,    0,   63,    7,    0,   63,   63,
        0,   34,   18,   26,   63,   63,    6,   38,    0,   63,
       36,   40,   89,   89,   89,   89,   89,   89,    0,   87,
       74,    0,   87,   84,   87,   73,    0,    0,    0,    0,
       97,    0,  101,    0,   99,  103,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,   63,    7,   12,
       63,    0,   20,   63,   63,   38,   11,    0,   89,   89,

       89,   72,   87,   74,   79,    0,   87,   78,    0,    0,
        0,  101,    0,    0,    0,    0,    0,    0,    5,    0,
       12,   63,   15,   20,   63,    0,   11,   37,   89,   89,
       72,    0,   79,   81,   87,   78,    0,  100,    0,    0,
        0,    0,   16,   63,   15,   63,   23,   37,   89,   82,
       81,   87,    0,  100,    0,    0,   16,    0,   63,   23,
       89,   82,   87,    0,    0,    0,   24,    0,   89,    0,
        0,   24,   17,   83,   17,   83,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,    9,    7,   10,
       11,    9,    9,   12,    9,    7,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    9,
        9,    9,    6,    9,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        7,   40,    7,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   51,    7,   66,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    4,
        4,    5,    1,    6,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static yyconst flex_int16_t yy_base[1286] =
    {   0,
        0,    0,   65,  104,  143,  182,  222,    0,  288,    0,
      353,    0,   79,   83,  413,    0, 4010, 4011,  478,   87,
      118,   89, 4001,   72, 3993,   97, 3992,  109,  117,  102,
       86,  144,   58,  119,  155,  146,  145,  159,  519,  346,
      175,  476, 3940,    0,  206,  514,  543,  353, 3990, 4011,
      557, 4011, 4011,    0,  596, 4011, 4011,  126, 3990, 4011,
      656,  722,  536,  557,  596,  652,  657,  658,  723,  773,
      659, 3988, 4011,  833, 4011,  109,  665,  148,  337,  354,
      158,  156,  354,  344,  467,  721,  531,  602,  629, 3987,
      742, 4011,  581, 4011,  210,  630,    0,  211,    0,    0,

      756, 3993,  388, 3985,  456,  756,  544,  457,  470,  472,
      523,  526,  550,  738,  542,  589,  656,  781,  595, 3933,
      839,  843,  800,  866,  487, 4011, 3985, 3982,  722,  656,
      770,  603,  805,  769,  759,  739,  840,  765,  857,  848,
      810,  865,  861,  869,  665,  873,  881,  886,  890,  874,
      897,  901,  895,  902,  918,  887, 3988, 3980, 3928,  953,
        0,  963,  936,  967,  971, 3978, 3975,    0,    0,  586,
      961,  771,  822,  880,  893,  907,  927,  941,  959,  939,
      835, 3974,  968,  974,  995, 1002, 1012,  996, 1020, 1030,
     1040, 1061, 1062, 1083, 1124, 1078, 3971,    0, 1103,  960,

      945,  964,  995, 1015, 1008, 1044, 1086, 1078, 1079, 1075,
     1100, 1118, 1089, 1098, 1127, 1128, 1113, 1111, 1124, 1123,
     1134, 1141, 1143, 1141, 1132, 1154, 1138, 1139, 1198, 3970,
     4011, 1202, 3967, 1210,  995, 1183, 3964,    0, 1171, 1161,
     1182, 1197, 1197, 1176, 1194, 1190, 1192, 1187, 1194, 1195,
     1197, 1204, 1209, 1241, 1219, 1222, 1221, 1213, 1207, 1223,
     1213, 1275, 3957, 1247, 1246, 1267, 1257, 1268, 1208, 1269,
     1274, 1280, 1276, 1282, 1270, 1287, 1288, 1290, 1285, 1297,
     1300, 1306, 1291, 1302, 1305, 1317, 1325, 1313, 1324, 1326,
     1328, 1335, 1331, 1327, 1347, 1351, 1350, 1219, 4011, 4011,

     4011, 1395, 4011, 3953, 1311, 1352, 1338, 1342, 1360, 1346,
     1342, 1349, 1361, 1387, 1372, 1375, 1357, 1392, 1394, 1412,
     1419, 1428, 1444, 1446, 1464, 1480, 1499, 1498, 1505, 1529,
     1547, 1530, 4011, 1412, 1398, 1406, 1441, 1446, 1434, 1459,
     1446, 1480, 1478, 1480, 1490, 1484, 1506, 1524, 1530, 1528,
     1542, 1551, 1534, 1536, 1543, 1545, 1552, 1561, 1564, 1560,
     4011, 4011, 1556, 1575, 1564, 1578, 1563, 1581, 1590, 1591,
     1583, 1578, 1580, 1578, 1582, 1595, 1599, 1603, 1586, 1601,
     1610, 1592, 1595, 1597, 1604, 1606, 1616, 1612, 1623, 1618,
        0, 1634, 1635, 1639, 1642, 3951, 1651, 1645, 1652, 1653,

     1655, 1661, 1657, 1662, 1665, 1663, 3947, 3945, 1668, 3943,
     1676, 1679, 1670, 1689, 1684, 1691, 3939, 1688, 1711, 1717,
     1698, 1705, 1712, 1719, 3935, 1720, 4011, 1691, 1703, 1699,
     1722, 1717, 1713, 1711, 1727, 1716, 1729, 1738, 1724, 1727,
     1733, 1736, 1761, 1765, 1766, 1774, 1807, 1783, 1799, 1815,
     1817, 1824, 1842, 1851, 1867, 1858, 1876, 1765, 1769, 1815,
     1823, 1843, 1853, 3934, 1861, 1858, 1883, 1874, 1888, 1894,
     1887, 3912, 1889, 1905, 1892, 1892, 1903, 3911, 1899, 1915,
     1914, 1905, 1904, 1919, 1912, 1919, 1909, 3909, 1916, 1917,
     1916, 1914, 1920, 1926, 1941, 1928, 3908, 1930, 3898, 1942,

     1953, 1939, 1939, 1944, 1954, 1959, 1964, 1962, 1951, 1967,
     3897, 1965,    0, 1975, 1976, 1979, 1986,  205, 1978, 1988,
     1995, 1985, 2001, 2002, 2006, 3896, 2008, 2010, 1359, 1410,
     2011, 1754, 2016, 2013, 2012, 2034, 2024, 2035, 1833, 2037,
     2046, 2049, 2051, 2036, 3886, 2042, 3885, 2028, 2055, 2049,
     2039, 2047, 2044, 2046, 2066, 2056, 2057, 2072, 2057, 2056,
     2068, 2074, 2080, 2079, 2101, 2143, 2107, 2145, 2125, 2163,
     2190, 2194, 2196, 2215, 2224, 2237, 2242, 2246, 2267, 3882,
     2080, 2072, 2087, 2091, 2096, 3881, 2116, 2114, 2106, 2113,
     3879, 2113, 2116, 3878, 2157, 2148, 2163, 2168, 2159, 3876,

     2185, 2179, 2211, 2227, 2230, 2226, 3875, 2254, 2245, 2277,
     3874, 2261, 2263, 2272, 2270, 2279, 2278, 2281, 2280, 3871,
     2295, 3856, 2283, 2282, 2297, 2298, 2290, 2291, 2306, 2293,
     3850, 2287, 3827, 3819, 2298, 3796, 2320, 2324, 2120, 2313,
     2331, 2352, 2333, 2343, 2345, 2346, 2347, 2349, 2350, 2131,
     2355, 2353,  947, 2383, 3755, 2404, 2376, 2396, 2386, 2375,
     2359, 2385, 2421, 3745, 2397, 2398, 2400, 2413, 2171, 2402,
     2212, 2432, 2423, 2397, 2426, 2409, 2419, 2417, 2417, 2416,
     2430, 2416, 2431, 2432, 2426, 2443, 2430, 3739, 2463, 3660,
     2469, 2476, 2467, 2508, 2510, 2515, 2528, 2559, 2560, 2561,

     2566, 2591, 2607, 2609, 3624, 3591, 2442, 3532, 2452, 2471,
     2470, 2378, 2502, 2510, 2519, 2526, 3525, 2560, 2564, 1082,
     3512, 2578, 2582, 2608, 2599, 2627, 3496, 2611, 2604, 2601,
     2624, 2612, 2616, 2618, 3490, 2632, 2623, 2461, 2622, 2623,
     2627, 2626, 2650, 2638, 2655, 2656, 3480, 2657, 2659, 2662,
     2667, 2654, 2659, 2655, 2651, 3432, 2660, 3431, 2670, 2485,
     2685, 2678, 1795, 2689, 2705, 2546, 3429, 2706, 2707, 2692,
     2709, 2694, 2715, 2717, 2189, 2719, 3409, 2590, 2738, 2499,
     2764, 2731, 3392, 2720, 3332, 3325, 3308, 2768, 2584, 2679,
     2732, 3301, 2729, 2781, 2773, 2706, 2787, 3294, 2706, 2755,

     2745, 2744, 2748, 2761, 2776, 2776, 3293, 2776, 2779, 2779,
     2770, 2766, 2763, 2811, 2804, 2802, 2827, 2829, 2847, 2860,
     2868, 2881, 3288, 2890, 2888, 2912, 2920, 2929, 2936, 2806,
     2810, 2783, 3255, 2792, 2800, 2819, 2828, 3257, 2823, 2815,
     2833, 2835, 2846, 2866, 3166, 2924, 3128, 2865, 3122, 3090,
     2991, 3084, 2900, 2914, 3073, 2917, 2935, 2924, 2936, 2927,
     2952, 2997, 2954, 2956, 2949, 2964, 2957, 2971, 2977, 3007,
     2959, 2982, 2954, 2970, 2925, 2918, 2894, 2981, 2886, 2987,
     2876, 2965, 2864, 2993, 3010, 2995, 3004, 2996, 3005, 3010,
     3006, 2855, 2835, 2822, 3027, 3013, 2682, 3035, 3027, 2745,

     2802, 3030, 3033, 3034, 3053, 3036, 3023, 3050, 3044, 3069,
     2795, 3064, 3062, 3040, 3042, 3058, 3058, 3048, 3050, 3064,
     2747, 2595, 3051, 2579, 2545, 3062, 2539, 3071, 3087, 3098,
     3099, 3104, 3106, 3123, 3142, 2538, 3095, 2498, 3148, 2489,
     2458, 3150, 2453, 3101, 3180, 3096, 3130, 3098, 3100, 3141,
     3137, 3144, 2452, 2404, 3169, 3145, 2363, 3205, 3152, 3158,
     3165, 2351, 2315, 3171, 3174, 3180, 3172, 3175, 3187, 3183,
     2226, 2219, 3188, 2213, 3191, 2189, 2185, 2165, 2136, 2114,
     3189, 2090, 1977, 1847, 3219, 3080, 3205, 3210, 1835, 3214,
     3207, 3217, 3212, 3233, 3236, 3237, 3215, 3251, 3252, 3219,

     3253, 3250, 3266, 3272, 3276, 3280, 1828, 3257, 3285, 3264,
     3276, 3294, 3260, 3265, 3272, 3263, 3270, 1797, 3272, 1790,
     3271, 3295, 3308, 3314, 3315, 3316, 1760, 3346, 3300, 3302,
     3308, 1753, 3331, 3347, 3364, 3372, 1694, 3373, 3306, 3323,
     1533, 3336, 3329, 1522, 3343, 3393, 1516, 3353, 3352, 1515,
     1504, 3351, 3356, 1488, 3368, 3361, 3370, 3372, 1480, 1474,
     3383, 3380, 1415, 3376, 1405, 3409, 1398, 3403, 3302, 1373,
     3406, 3408, 1329, 3436, 3440, 3447, 3400, 3423, 3420, 3452,
     3453, 3459, 3463, 3467, 3458, 1166, 3472, 3441, 3478, 3482,
     3403, 3440, 1159, 3457, 3448, 3462, 3459, 3476, 3493, 1111,

     3483, 3501, 3548, 3528, 3488, 3492, 3514, 3519, 3532, 3544,
     3540, 1065, 1060, 3470, 1048, 3471, 3561, 3473, 1028, 1016,
     3488, 3570,  998, 3522,  987,  981, 3534, 3539,  977, 3535,
     3543,  966, 3575, 3577, 3570, 3574, 3588, 3583, 3577,  945,
     3590, 3606, 3610, 3614, 3576, 3589, 3619, 3624, 3607,  916,
     3629,  871,  818, 3609,  817, 3601, 3601,  807,  772, 3620,
     3635,  747, 3628, 3661, 3644, 3636,  733, 3643, 3609,  727,
     3685, 3628, 3699,  719, 3680,  723,  710, 3619,  705, 3645,
      691,  645, 3649, 3646,  644, 3689, 3694,  632, 3703, 3705,
     3694, 3644, 3709, 3700,  588, 3714, 3715, 3708, 3685,  587,

     3699, 3723, 3716, 3724, 3731,  556, 3708, 3732, 3737,  552,
     3711, 3771,  542,  525, 3712,  493, 3721,  488, 3747, 3742,
     3757, 3732, 3776, 3780, 3771, 3750, 3786, 3791,  470, 3738,
     3793,  379, 3795, 3799, 3790, 3803, 3768, 3819,  374, 3755,
     3780,  204, 3824,  185, 3834, 3797, 3845, 3805, 3795, 3849,
     3855, 3839, 3785, 3859,  180, 3786, 3871, 3818,  167, 3875,
     3808, 3880, 3872,  156,  120,  112, 3901, 3855,   98,   82,
       78, 3905, 3913, 3917, 3927, 3931, 4011, 3936, 3939, 3947,
     3955, 3963, 3971, 3975, 3983
    } ;

static yyconst flex_int16_t yy_def[1286] =
    {   0,
     1277,    1, 1278, 1278, 1278, 1278, 1277,    7, 1277,    9,
        9,   11,   11,   11, 1277,   15, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1277, 1277, 1280, 1277, 1277, 1277, 1280, 1277, 1277,
     1277, 1277, 1277, 1281, 1281, 1277, 1277, 1277, 1281, 1277,
     1282, 1282,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1283, 1277, 1284,   19,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1277, 1277, 1277, 1277,
     1280, 1277, 1280, 1277, 1277, 1277, 1277, 1281,   55, 1277,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1277, 1281,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1277,   74, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1283, 1284, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1277, 1277,

     1277, 1277, 1277, 1277, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1285, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,

     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1277, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1285, 1279, 1279, 1279, 1279, 1277, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1277, 1277,
     1279, 1277, 1279, 1279, 1279, 1279, 1279, 1279, 1277, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1277, 1279, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1277, 1279,
     1279, 1277, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1277,
     1279, 1279, 1277, 1277, 1279, 1277, 1279, 1279, 1279, 1279,
     1279, 1279, 1277, 1279, 1279, 1279, 1279, 1279, 1277, 1279,
     1277, 1277, 1279, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,   62, 1277,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1279, 1279, 1277, 1279, 1279, 1277, 1277, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1277, 1279, 1279, 1277, 1277, 1277,
     1277, 1279, 1279, 1279, 1279, 1279, 1279, 1277, 1277, 1279,
     1279, 1279, 1279, 1277, 1279, 1277, 1277, 1279, 1281, 1281,

     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281,   62, 1277,   62,   62,   62,   62,   62,
       62,   62, 1277,   62,   62,   62,   62,   62,   62, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1279, 1279, 1277, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1277, 1279, 1277, 1277, 1279, 1277,

     1279, 1277, 1277, 1277, 1277, 1279, 1279, 1277, 1279, 1277,
     1279, 1277, 1277, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281,   62, 1277,   62,
       62,   62,   62,   62,   62, 1277, 1277, 1277,   62, 1277,
     1277,   62, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1277, 1277, 1277, 1279, 1277, 1277, 1279,

     1277, 1277, 1277, 1277, 1277, 1277, 1279, 1279, 1277, 1279,
     1277, 1277, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281,   62,   62,   62,   62,   62, 1277,   62, 1277, 1277,
     1277, 1277, 1277, 1277,   62, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1279, 1279, 1277, 1279,
     1279, 1279, 1279, 1277, 1277, 1277, 1279, 1277, 1279, 1277,
     1277, 1277, 1277, 1277, 1277, 1279, 1277, 1279, 1277, 1277,
     1281, 1281, 1281, 1281, 1281, 1281, 1281,   62,   62, 1277,

       62,   62, 1277,   62, 1277, 1277, 1277, 1277, 1277,   62,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1279, 1277, 1277, 1279, 1279,
     1277, 1277, 1277, 1277, 1279, 1279, 1277, 1277, 1277, 1279,
     1277, 1277, 1281, 1281, 1281, 1281, 1281, 1281, 1277,   62,
     1277, 1277,   62, 1277,   62, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1279, 1277, 1277,
     1279, 1277, 1277, 1279, 1279, 1277, 1277, 1277, 1281, 1281,

     1281, 1277,   62, 1277, 1277, 1277,   62, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1279, 1277, 1277, 1279, 1277, 1277, 1277, 1281, 1281,
     1277, 1277, 1277, 1277,   62, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1279, 1277, 1279, 1277, 1277, 1281, 1277,
     1277,   62, 1277, 1277, 1277, 1277, 1277, 1277, 1279, 1277,
     1281, 1277,   62, 1277, 1277, 1277, 1277, 1277, 1281, 1277,
     1277, 1277, 1277, 1277, 1277, 1277,    0, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277
    } ;

static yyconst flex_int16_t yy_nxt[4078] =
    {   0,
       18,   19,   20,   21,   19,   22,   22,   23,   18,   22,
       22,   24,   18,   22,   25,   26,   27,   28,   29,   30,
       31,   27,   27,   32,   27,   33,   34,   35,   36,   27,
       37,   38,   39,   40,   27,   27,   41,   27,   27,   42,
       18,   26,   27,   28,   29,   30,   31,   27,   27,   32,
       27,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       27,   27,   41,   27,   27,   43,   45,   46,   21,   47,
       48,   48,  127,  125,   48,   48,  125,  141,   48,   25,
       73,   91,   75,   73,   73,   91,   75,   73,  121,  122,
      121,  121, 1273,   73,  123,  123, 1274,   73,  123,  123,

      127,  104,  123,  141,   49,   45,   46,   21,   47,   48,
       48,  127, 1270,   48,   48,  138,  127,   48,   25,  101,
      101,  101,  101,  127,  131,  129, 1271,  181,  130,  136,
      181,  127,  104,  127, 1267,  132,  134,  209,  133,  137,
      135,  138,  142,   49,   50,   51,   52,   53,   48,   48,
      131,  129,   48,   48,  130,  136,   48,   53,  127,  127,
      127,  132,  134,  209,  133,  137,  135,  213,  142,  127,
     1270,  139,  140,  127,  143,  144,  146,  218,  147,  219,
      145, 1268,   53,   50,   51,   52,   53,   48,   48,  127,
      156,   48,   48,  213, 1265,   48,   53,  139,  140, 1258,

      143,  144,  146,  218,  147,  219,  145,  101,  101,  101,
      101,  235,  125,  235,  235,  125,  156,  263, 1247,  642,
      104,   53,   54,   55,   56,   57,   55,   54,   54,   54,
       54,   54,   54,   58,   54,   59,   60,   61,   61,   62,
       63,   64,   61,   61,   61,   65,   61,   66,   61,   67,
       61,   61,   68,   69,   70,   71,   61,   61,   61,   61,
       61,   72,   54,   61,   61,   62,   63,   64,   61,   61,
       61,   65,   61,   66,   61,   67,   61,   61,   68,   69,
       70,   71,   61,   61,   61,   61,   61,   54,   73,   74,
       73,   75,   74,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   76,   73,   77,   78,   79,   73,   73,
       73,   80,   73,   81,   82,   83,   73,   73,   84,   85,
       86,   87,   73,   73,   73,   73,   73,   73,   73,   76,
       73,   77,   78,   79,   73,   73,   73,   80,   73,   81,
       82,   83,   73,   73,   84,   85,   86,   87,   73,   73,
       73,   73,   73,   73,   88,   88,   89,   88,  163,  163,
      127,  152,  163,  163,  214,  153,  163,   90,   73,  154,
       73,   73,   73,  220,  215,  221,   73,  155,   73,   73,
       73,  216,  217,   73,   73,   73,   73,  152, 1243,  125,
      214,  153,  125, 1250,   73,  154,   73,   73,   73,  220,

      215,  221,   73,  155,   73,   73,   73,  216,  217,   73,
       73,   73,   73,   92,   93,   94,   95,   93,   96,   92,
       92,   96,   97,   92,   98,   96,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   96,  100,
      101,  101,  100,  157, 1232,  102,  222,  239,  125,  103,
      158,  125,  104,  105,  245,  106,  107,  108,  109,  246,

      247,  110, 1242,  111,  112,  113,  114, 1223,  115,  116,
      117,  118,  222,  239,  119,  101,  162,  101,  101,  105,
      245,  106,  107,  108,  109,  246,  247,  110,  104,  111,
      112,  113,  114,  127,  115,  116,  117,  118,  148, 1239,
      119,  159,  248,  120,  101,  101,  101,  101,  149,  249,
      227,  183,  150,  151,  228,  187, 1238,  104,  164,  165,
      165,  164,  183,  243,  148,  183, 1232,  244,  248,  250,
     1234,  166,  183,  253,  149,  249,  227,  183,  150,  151,
      228,  187,  234,  183,  235,  234,  183,  181,  183,  243,
      181,  183,  103,  244,  188,  250,  167,  169,  183,  253,

      169, 1206, 1226,  229,  229,  229,  229,  170,  254,  183,
      261,  183,  183,  171,  172,  173,  230,  127,  267,  174,
      188,  175,  183,  176,  189,  183,  177,  178,  179,  180,
      229,  229,  229,  229,  254,  236,  261,  183,  236,  171,
      172,  173,  236,  230,  267,  174, 1220,  175,  183,  176,
      189,  183,  177,  178,  179,  180,  168,  168, 1197, 1193,
      168,  168,  168,  168,  168,  168,  168,  183,  168,  168,
      127,  190,  183,  183,  183,  255,  191,  265,  183,  127,
      210,  183,  196,  183,  183,  183,  183,  183,  183,  192,
      256,  211,  283,  183,  212,  236,  168,  190,  183,  183,

      183,  255,  191,  265,  183, 1216,  210,  183,  196,  183,
      183,  183,  183,  183,  183,  192,  256,  211,  283, 1190,
      212,  168,  168,  168, 1187, 1176,  168,  168,  168,  168,
      168,  168,  168, 1213,  168,  168,  127,  184,  183,  264,
      223, 1206,  193,  232,  232,  232,  232, 1208,  185,  183,
      224,  186,  183,  127,  225,  226,  233,  101,  101,  101,
      101, 1205,  168,  184,  183,  264,  223,  251,  193,  273,
      104,  240,  252,  127,  185,  183,  224,  186,  183,  127,
      225,  226,  241,  127,  127,  242, 1202,  168,  183,  270,
      308,  272,  194,  251,  275,  273,  257,  240,  252,  183,

      258,  271,  183,  266,  259,  123,  123,  195,  241,  123,
      123,  242,  260,  123,  183,  270,  308,  272,  194,  127,
      275, 1167,  257,  268,  127,  183,  258,  271,  183,  266,
      259, 1162, 1159,  195,  198,  269,  181,  198,  260,  181,
      121,  122,  121,  121,  121,  122,  121,  121,  278,  268,
      199,  200,  201,  104,  127,  274,  202,  104,  203,  309,
      204,  269,  127,  205,  206,  207,  208,  262,  262,  262,
      262,  127,  276, 1152,  278,  127,  199,  200,  201,  127,
      277,  274,  202,  127,  203,  309,  204,  127,  127,  205,
      206,  207,  208,  279,  281,  127,  284,  280,  276,  285,

      127,  127,  282,  288,  127,  290,  277,  286,  310,  127,
      289,  127,  311,  291,  287,  127,  127,  294,  298,  279,
      281,  295,  284,  280,  292,  285,  312,  293,  282,  288,
     1198,  290,  127,  286,  310,  296,  289,  297,  311,  291,
      287,  163,  163,  294,  298,  163,  163,  295,  778,  163,
      292,  778,  312,  293,  302,  302,  302,  302,  313, 1192,
      314,  296,  317,  297,  101,  162,  101,  101,  164,  165,
      165,  164,  165,  165,  165,  165,  305,  104,  315,  213,
     1185,  166,  215,  183,  313,  166,  314,  306,  317,  183,
      307, 1182,  217,  316,  183, 1179,  235,  183,  235,  235,

      183, 1137,  305,  183,  315,  213,  167,  318,  215,  183,
      319,  322, 1177,  306,  218,  183,  307,  183,  217,  316,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
     1167,  183,  320,  318,  220,  183,  319,  322,  183,  221,
      218,  183, 1173,  183,  321,  183,  183,  183,  183,  183,
      183,  183,  323,  183,  183,  183,  183,  183,  320,  183,
      220,  183, 1162,  222,  183,  221,  183,  183,  324,  183,
      321,  183,  183,  325, 1159,  183,  183,  183,  323, 1168,
      327,  183,  183,  846,  326,  183,  846,  183,  328,  222,
      183,  183,  183,  183,  324,  183,  337,  336,  183,  325,

      329,  228,  183,  183,  183,  223,  327,  183,  338,  183,
      326,  332,  183,  183,  328,  339,  183,  183,  210,  183,
      335,  342,  337,  336,  183, 1161,  329,  228,  343,  211,
      183,  223,  334,  183,  338,  183,  340,  332,  183,  183,
      330,  339,  344,  345,  210,  346,  335,  342,  341,  347,
      183,  331,  348,  183,  343,  211,  349,  350,  334,  351,
      353,  354,  340,  355,  359,  183,  330,  352,  344,  345,
      356,  346,  360, 1100,  341,  347,  183,  331,  348,  183,
     1149,  357,  349,  350,  358,  351,  353,  354,  236,  355,
      359,  236,  363,  352,  364,  236,  356,  365,  360,  229,

      229,  229,  229,  232,  232,  232,  232,  357,  370,  371,
      358,  234,  230,  235,  234,  366,  233,  368,  363,  372,
      364,  103,  127,  365,  373,  374,  375,  367,  376,  369,
      377,  378,  379,  127,  370,  371,  383,  386,  384,  387,
      388,  366,  389,  368,  390,  372,  397,  426,  236,  385,
      373,  374,  375,  367,  376,  369,  377,  378,  379,  380,
      127,  127,  383,  386,  384,  387,  388,  381,  389,  392,
      390,  127,  397,  426,  382,  385,  262,  262,  262,  262,
      393,  127,  127,  127,  127,  380,  394,  396,  127,  395,
      127,  399,  398,  381,  127,  392,  127,  400,  401,  127,

      382,  127,  127,  403,  127,  127,  393,  411,  404,  402,
      407,  127,  394,  396,  127,  395,  127,  399,  398,  127,
      127,  405,  409,  400,  401,  410,  406,  127,  413,  403,
      408,  127,  414,  411,  404,  402,  407,  412,  127,  127,
      127,  127,  127, 1141,  428,  127,  416,  405,  409,  127,
      421,  410,  406,  422,  413,  418,  408,  417,  414,  415,
      419,  127,  420,  412,  127,  127,  423,  429,  430,  425,
      428,  263,  416,  653,  431,  432,  421,  424,  433,  422,
      434,  418,  435,  417,  436,  415,  419, 1138,  420,  439,
      442,  440,  423,  429,  430,  425,  302,  302,  302,  302,

      431,  432,  441,  424,  433,  437,  434,  183,  435,  183,
      436,  443, 1135,  438,  459,  439,  442,  440,  183, 1133,
      183,  183,  263,  183,  654,  357,  444,  183,  441, 1081,
      458,  437,  460,  183,  183,  183,  446,  443,  183,  438,
      459,  183,  341,  183,  183,  183,  183,  183,  183,  183,
      445,  357,  444,  183,  183,  447,  458,  183,  460,  183,
      183,  183,  446,  461,  183,  462,  463,  183,  341,  183,
      183,  183,  183,  183,  183,  183,  445,  448,  464,  183,
      183,  447,  449,  183,  465,  183,  450,  183, 1076,  461,
      183,  462,  463,  183, 1075,  183,  183,  466,  183,  183,

      467,  183, 1125,  448,  464,  183,  183,  468,  449,  183,
      465,  469,  450,  453,  183,  451,  183,  470, 1066,  183,
      183,  183,  452,  466,  183,  183,  467,  183,  183, 1122,
     1119,  183,  183,  468,  183,  183, 1117,  469,  454,  453,
      183,  451,  471,  470,  183,  183,  183, 1100,  452,  472,
      183,  183,  473,  183,  183,  183,  457,  183,  183,  183,
      183,  455,  183,  474,  454,  475,  476,  477,  471,  478,
      183,  183,  479,  183,  456,  472,  183,  480,  473,  481,
      482,  183,  457,  483,  183,  183,  484,  455,  183,  474,
      485,  475,  476,  477,  486,  478,  487,  488,  479,  183,

      456,  489,  183,  480,  490,  481,  482,  491,  492,  483,
      493,  494,  484,  495,  496,  497,  485,  498,  499,  500,
      486,  501,  487,  488,  502,  503,  504,  489,  505,  506,
      490,  507,  508,  491,  492,  509,  493,  494,  510,  495,
      496,  497,  511,  498,  499,  500,  512,  501,  127,  127,
      502,  503,  504,  127,  505,  506,  127,  507,  508,  127,
      516,  509,  515,  514,  510,  127,  127,  127,  511,  127,
      523,  127,  512,  520,  517,  127,  127,  127,  519,  127,
      527,  526,  127,  521,  127,  525,  516,  522,  515,  514,
      127,  524,  528,  127,  534,  533,  523,  531,  127,  520,

      517,  535,  127,  127,  519,  127,  527,  526, 1112,  521,
      550,  525,  127,  522,  538,  537,  540,  524,  528,  127,
      534,  533,  536,  531,  545,  127,  127,  535,  541,  544,
      542,  127,  543,  127,  127,  551,  550,  552,  547,  553,
      538,  537,  540,  549,  554,  546,  555,  556,  536,  557,
      545,  558,  559,  560,  541,  544,  542,  561,  543,  562,
      563,  551,  564,  552,  547,  553,  263, 1107,  656,  549,
      554,  546,  555,  556, 1103,  557,  183,  558,  559,  560,
      183,  183,  565,  561,  580,  562,  563,  183,  564,  183,
      183,  183,  183,  567,  183,  183,  885,  566,  570,  885,

      183,  581,  183,  183, 1032,  568,  183,  183,  565,  183,
      580, 1027,  183,  183,  183,  183,  183,  183,  183,  567,
      183,  183,  183,  566,  570,  183,  183,  581,  571,  183,
      183,  568,  573,  183,  582,  183,  183,  569,  183,  183,
      183,  183, 1085,  183,  572,  263,  183,  663,  183, 1069,
      183,  183,  583,  183,  571,  574,  183,  183,  573,  183,
      582, 1012,  183,  569,  584,  183,  183,  183,  183,  183,
      572,  183,  183,  578,  576,  575,  183,  183,  583,  183,
      183,  574,  183,  183,  183,  585,  577,  183,  587,  588,
      584,  183,  183,  183,  183,  579,  183,  183,  589,  578,

      576,  575,  183,  183,  590,  183,  183,  591,  183,  592,
      183,  585,  577,  183,  587,  588,  593,  183,  595,  183,
      596,  579,  183,  597,  589,  598,  599,  601,  183,  604,
      590,  183,  602,  591,  603,  592,  605,  606,  607,  608,
      609,  610,  593,  612,  595,  613,  596,  614,  615,  597,
      616,  598,  599,  601,  617,  604,  618,  619,  602,  621,
      603,  623,  605,  606,  607,  608,  609,  610,  624,  612,
      625,  613,  626,  614,  615,  627,  616,  628,  629,  630,
      617,  631,  618,  619,  632,  621,  633,  623,  635,  127,
      127, 1065,  127,  127,  624,  637,  625,  643,  626,  127,

      639,  627,  127,  628,  629,  630,  636,  631,  638,  127,
      632,  644,  633,  640,  635,  127,  127,  646,  645,  641,
      127,  637,  127,  643,  127,  127,  127,  127,  648,  655,
      127,  659,  636,  647,  638,  649,  651,  644,  127,  640,
      263,  652,  672,  646,  645,  641,  658,  657,  127,  127,
      127,  127,  661,  660,  648,  655,  127,  659,  664,  647,
      127,  649,  651,  127,  662,  127,  666,  652,  668,  127,
      674,  675,  658,  657,  676,  677,  678,  665,  661,  660,
      670,  679,  667,  673,  664,  680,  681,  682,  683,  684,
      662,  685,  666,  686,  668,  687,  674,  675,  688,  603,

      676,  677,  678,  665, 1009,  707,  670,  679,  667,  673,
      690,  680,  681,  682,  683,  684,  183,  685,  708,  686,
      709,  687,  183,  710,  688,  603,  693,  183, 1005,  711,
      689,  707,  263,  183,  763,  713,  183,  714,  715,  716,
      183,  718,  183,  263,  708,  775,  709,  719,  183,  710,
     1004,  695,  693,  183,  183,  711,  689,  690,  183,  183,
      183,  713,  183,  714,  715,  716,  183,  718,  694,  183,
      691,  183,  183,  719,  183,  721,  692,  695,  183, 1003,
      183,  722,  723,  263,  183,  794,  183,  724,  725,  183,
      895,  696,  183,  895,  694,  183,  691,  183,  183, 1063,

      183,  721,  692, 1001,  183,  183,  727,  722,  723,  183,
      728,  183,  698,  724,  725,  183,  183,  696,  183,  183,
      183,  697,  183,  183,  263,  183,  796,  998,  729,  699,
      183,  183,  727, 1060,  700,  183,  728,  183,  698,  183,
     1059,  183,  183,  701,  183,  183,  183,  697,  183,  183,
      183,  183,  183,  183,  729,  699,  183,  183,  730,  703,
      700,  183,  731,  183,  732,  183,  702,  183,  183,  701,
      183,  183,  183,  733,  734,  183,  183,  704,  183,  183,
      739,  705,  183,  183,  730,  703,  740,  183,  731,  183,
      732,  735,  702,  183,  183,  741,  183,  183,  183,  733,

      734,  183,  742,  704,  736,  743,  739,  744,  183,  745,
      737,  746,  740,  747,  748,  749,  750,  751,  752,  183,
      753,  741,  183,  754,  755,  757,  759,  127,  742, 1051,
      736,  743,  764,  744,  127,  745,  737,  746,  127,  747,
      748,  749,  750,  751,  752,  127,  753,  127,  761,  754,
      755,  757,  759,  766,  767,  762,  766,  127,  764,  127,
      127,  127,  765,  127,  127, 1050,  768,  127,  773,  127,
      772,  777,  776,  127,  761,  770,  769, 1032,  771,  837,
      838,  762,  837,  774,  779,  779,  779,  779,  765,  127,
      127,  786,  768,  785,  773,  782,  772,  777,  776,  127,

      127,  770,  769,  784,  771,  781,  781,  781,  781,  774,
      127,  127,  127,  787,  127,  783,  127,  786, 1027,  785,
      790,  782,  788,  788,  788,  788,  799,  127,  802,  784,
      793,  791,  795,  797,  797,  797,  797,  127,  792,  787,
      690,  783,  803,  804,  798,  805,  790,  806,  807,  808,
      809,  810,  799,  800,  802,  811,  793,  791,  795,  801,
      812,  813,  862,  767,  792,  862, 1044, 1036,  803,  804,
      798,  805, 1034,  806,  807,  808,  809,  810,  183,  800,
      832,  811,  183,  834,  183,  801,  812,  813,  816,  183,
      835,  183,  183,  183,  814,  183,  183,  263,  183,  882,

      818,  836,  183, 1033,  183,  183,  832,  817,  183,  834,
      183,  263, 1031,  898,  816,  183,  835,  183,  183,  183,
      814,  183,  183,  183,  183,  183,  818,  836,  183,  820,
      183,  183,  821,  817,  183,  839,  183,  183,  819,  183,
      840,  183,  841,  183,  183,  842,  822,  766,  767,  183,
      766,  183, 1029,  943,  183,  820,  183,  183,  821,  941,
      183,  839,  183,  183,  819,  183,  840,  183,  841,  183,
      183,  842,  822,  823,  183,  183,  183,  844,  825,  824,
      183,  183,  845,  183,  826,  183,  183,  183,  183,  183,
      183,  778,  183,  940,  778,  183,  263,  847,  905,  848,

      183,  183,  183,  844,  825,  824,  183,  183,  845,  938,
      826,  183,  183,  183,  183,  183,  183,  183,  183,  827,
      183,  183,  183,  847,  183,  848,  849,  850,  851,  851,
      851,  851,  183,  183,  853,  183,  183,  854,  183,  855,
      828,  856,  857,  183,  858,  827,  183,  829,  183,  859,
      183,  860,  849,  850,  861,  863,  864,  865,  866,  183,
      853,  183,  183,  854,  183,  855,  828,  856,  857,  867,
      858,  868,  869,  829,  870,  859,  872,  860,  873,  874,
      861,  863,  864,  865,  866,  875,  876,  877,  878,  879,
      880,  881,  127,  127,  263,  867,  998,  868,  869,  127,

      870,  884,  872,  127,  873,  874,  127,  912,  127,  906,
      912,  875,  876,  877,  878,  879,  880,  881,  883,  127,
      127,  127,  886,  127,  887,  890,  892,  884,  888,  127,
      889,  127,  891,  127,  127,  906,  894,  914,  896,  779,
      779,  779,  779,  127,  883,  127,  127,  893,  886,  899,
      887,  890,  892,  901,  888,  907,  889,  263,  891, 1001,
      909,  936,  894,  914,  896,  781,  781,  781,  781,  788,
      788,  788,  788,  893,  915,  899,  916,  917,  918,  901,
      919,  907,  910,  910,  910,  910,  909,  127,  797,  797,
      797,  797,  911,  920,  921,  922,  923,  924,  925,  926,

      915,  927,  916,  917,  918,  929,  919,  944,  929, 1011,
      944,  945,  838,  946,  945,  948, 1002,  183,  911,  920,
      921,  922,  923,  924,  925,  926,  183,  927,  183,  837,
      838,  183,  837,  949,  928,  930,  996,  183,  950,  946,
      183,  948,  183,  183,  183,  951,  931,  955,  952,  995,
      955,  932,  183,  183,  183,  183,  183,  183,  183,  949,
      928,  930,  183,  183,  950,  953,  183,  954,  183,  994,
      183,  951,  931,  183,  952,  183,  183,  932,  986,  183,
      933,  183,  183,  183,  183,  956,  183,  935,  183,  183,
      984,  953,  934,  954,  183,  936,  183,  183,  957,  183,

      982,  183,  183,  183,  938,  183,  933,  183,  980,  183,
      183,  956,  183,  935,  183,  183,  183,  183,  934,  183,
      183,  939,  183,  183,  957,  846,  940,  183,  846,  183,
      959,  183,  979,  183,  941,  183,  183,  960,  183,  978,
      183,  183,  183,  183,  183,  183,  183,  939,  961,  183,
      943,  183,  942,  183,  962,  183,  959,  963,  183,  964,
      965,  183,  183,  960,  183,  183,  985,  183,  976,  985,
      183,  966,  183,  898,  961,  183,  967,  183,  942,  968,
      962,  183,  969,  963,  183,  964,  965,  970,  183,  971,
      972,  183,  851,  851,  851,  851,  973,  966,  862,  767,

      975,  862,  967,  977,  981,  968,  983,  127,  969,  127,
      127,  885,  987,  970,  885,  971,  972,  988,  127,  127,
      127,  974,  973,  989,  127,  990,  975,  127,  895,  977,
      981,  895,  983,  992,  991,  993,  999,  127,  987,  999,
      997,  127,  263,  988, 1003,  263,  263, 1004, 1005,  989,
      127,  990, 1008, 1000, 1006, 1006, 1006, 1006,  127,  992,
      991,  993,  263, 1013, 1009,  912,  997, 1010,  912, 1007,
      910,  910,  910,  910,  263, 1014, 1012, 1015, 1008, 1000,
     1016, 1017, 1018, 1019, 1020, 1021,  183,  943,  929, 1013,
     1022,  929,  263, 1010, 1066, 1007, 1030,  183,  958, 1030,

      183, 1014,  944, 1015,  941,  944, 1016, 1017, 1018, 1019,
     1020, 1021,  183,  183,  183, 1037, 1022, 1039, 1024,  183,
     1023,  183, 1040,  183,  183,  183,  183,  183,  183, 1026,
      183, 1038,  183, 1025, 1038,  183,  940, 1027,  183,  183,
      183, 1037,  938, 1039, 1024,  183, 1023,  183, 1040,  183,
      183,  183,  183,  183,  183, 1026,  183,  183,  183, 1025,
     1041,  183, 1032,  183,  183,  183, 1042, 1043,  183, 1028,
      955,  183, 1045,  955,  183,  183,  183,  183,  183, 1035,
      936,  945,  838,  183,  945, 1047, 1041, 1048, 1049,  183,
     1052,  183, 1042, 1043,  183, 1028, 1053,  183, 1045, 1054,

      183, 1055,  183,  183, 1056, 1035, 1046, 1046, 1046, 1046,
     1057, 1047, 1058, 1048, 1049, 1061, 1052, 1062, 1064,  127,
      985,  127, 1053,  985,  127, 1054,  127, 1055,  127,  127,
     1056,  127, 1070,  127, 1077, 1071, 1057, 1067, 1058, 1068,
     1073, 1061, 1079, 1062, 1064,  263, 1072, 1074,  263,  263,
     1075, 1076, 1078,  999, 1080, 1078,  999, 1080, 1070,  838,
     1077, 1071,  263, 1067, 1081, 1068, 1073, 1082, 1079,  947,
     1082,  127, 1072, 1083, 1083, 1083, 1083, 1084,  127, 1091,
     1084, 1006, 1006, 1006, 1006, 1086, 1087, 1092,  263, 1087,
     1089, 1093, 1094, 1095, 1088, 1090, 1090, 1090, 1090, 1096,

     1097, 1105,  937, 1030, 1105, 1091, 1030,  823,  913, 1106,
      183, 1086, 1106, 1092,  263,  908, 1137, 1093, 1094, 1095,
     1088,  183,  904,  183,  183, 1096, 1097, 1098, 1100,  183,
      183,  183, 1108, 1101,  183, 1108,  183, 1099, 1113,  903,
      183,  183,  183,  183,  183, 1102,  902,  183, 1109,  183,
      183, 1109, 1114, 1098, 1115,  183,  183,  183, 1116, 1101,
      183,  183, 1118, 1099, 1113, 1104,  183,  183,  183,  183,
      183, 1102,  183, 1111, 1038,  183, 1111, 1038, 1114,  183,
     1115, 1120, 1121, 1123, 1116, 1124, 1126,  183, 1118, 1127,
      183, 1104, 1110,  183, 1046, 1046, 1046, 1046,  183, 1128,

     1129,  183, 1130, 1131, 1132,  183,  900, 1120, 1121, 1123,
     1134, 1124, 1126, 1134,  127, 1127,  183,  127, 1110,  183,
      127, 1136,  127,  897, 1078, 1128, 1129, 1078, 1130, 1131,
     1132,  767, 1139, 1145,  127, 1153, 1140, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143,  796,  794, 1136, 1144, 1144,
     1144, 1144, 1146, 1080, 1147,  127, 1080, 1147, 1139, 1145,
     1082, 1153, 1140, 1082, 1083, 1083, 1083, 1083, 1084, 1154,
      263, 1084, 1148, 1087, 1150, 1155, 1087, 1156, 1146, 1151,
     1152, 1157, 1151, 1090, 1090, 1090, 1090, 1158, 1169, 1105,
     1159,  183, 1105, 1106,  871, 1154, 1106, 1162,  183, 1170,

     1150, 1155,  183, 1156,  763,  183, 1172, 1157,  183,  183,
      852, 1160,  183, 1158, 1169, 1166,  183,  183, 1166,  183,
     1108, 1174,  183, 1108,  183, 1170,  823,  183,  183, 1163,
      183,  183, 1172, 1109,  183,  183, 1109, 1160,  183,  843,
     1178, 1111,  183,  183, 1111,  183,  833, 1174,  183, 1164,
     1164, 1164, 1164,  183,  183, 1163,  183,  183, 1167,  183,
     1180, 1165, 1171, 1171, 1171, 1171, 1178, 1181, 1183,  183,
      183, 1175, 1176,  183, 1175, 1184, 1186, 1152, 1134, 1186,
      183, 1134,  263,  183, 1187,  183, 1180, 1165,  127, 1189,
      127,  127, 1189, 1181, 1183,  263,  183, 1190, 1194,  183,

     1191, 1184,  263,  127, 1193,  831, 1188, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144,  263,
     1147, 1197, 1195, 1147, 1194, 1196, 1191, 1199, 1196, 1200,
     1151, 1152, 1188, 1151, 1201,  183, 1204, 1166,  830, 1204,
     1166, 1210, 1206,  183, 1209, 1176,  183, 1209, 1195,  183,
     1211, 1214, 1203, 1199,  183, 1200,  263,  183, 1223,  183,
     1201,  183, 1164, 1164, 1164, 1164, 1207, 1210, 1215,  183,
      183, 1217,  183,  183,  815,  183, 1211, 1214, 1203, 1218,
      183, 1175, 1176,  183, 1175,  183, 1171, 1171, 1171, 1171,
     1186, 1152, 1207, 1186, 1215, 1219,  183, 1217, 1219,  183,

     1212, 1212, 1212, 1212, 1189, 1218, 1221, 1189,  127, 1221,
     1224, 1224, 1224, 1224,  127, 1196, 1227, 1229, 1196, 1227,
      263, 1230, 1228,  183, 1231, 1204, 1222, 1231, 1204, 1225,
     1232,  183, 1233, 1236,  183, 1233, 1236, 1235, 1209, 1176,
     1237, 1209,  183, 1229, 1240,  183,  127, 1230, 1219,  183,
     1241, 1219, 1222,  705,  263, 1225, 1243,  183, 1221,  789,
      183, 1221,  263, 1235, 1247, 1244, 1237, 1249,  183,  780,
     1240,  183, 1212, 1212, 1212, 1212, 1241, 1245, 1245, 1245,
     1245, 1224, 1224, 1224, 1224,  127, 1253, 1227, 1255, 1246,
     1227, 1244, 1248, 1249, 1231, 1248, 1233, 1231, 1256, 1233,

     1251, 1251, 1251, 1251, 1236,  183, 1248, 1236, 1252, 1248,
      760,  127, 1253, 1261, 1255, 1246,  183, 1264, 1266,  183,
     1254, 1254, 1254, 1254, 1256, 1257, 1257, 1257, 1257, 1259,
      263,  183, 1267,  672, 1252, 1245, 1245, 1245, 1245, 1261,
     1269,  758,  183, 1264, 1266,  183, 1260, 1260, 1260, 1260,
     1262, 1262, 1262, 1262,  183, 1259, 1251, 1251, 1251, 1251,
     1254, 1254, 1254, 1254,  756,  183, 1269,  263,  183, 1273,
      656, 1263, 1257, 1257, 1257, 1257, 1260, 1260, 1260, 1260,
      183, 1262, 1262, 1262, 1262,  654, 1270,  183,  738,  705,
      726,  183,  720,  717,  183,  712,  706, 1263,  183,  671,

      669,  183, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
      650,  634,  622,  183, 1275, 1275, 1275, 1275, 1276, 1276,
     1276, 1276,  620,  611,  183,  600,  594,  183, 1275, 1275,
     1275, 1275, 1276, 1276, 1276, 1276,   44,   44,   44,   44,
       44,   44,   44,   44,   44,  128,  128,  161,  586,  548,
      161,  161,  161,  539,  161,  168,  168,  532,  168,  530,
      168,  529,  168,  183,  183,  518,  183,  427,  183,  391,
      183,  237,  237,  237,  362,  237,  237,  237,  237,  237,
      238,  361,  238,  513,  231,  333,  513,  182,  513,  304,
      513,  513,  303,  301,  300,  299,  127,  263,  160,  126,

      124,  231,  197,  182,  158,  160,  127,  126,  124, 1277,
       17, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277
    } ;

static yyconst flex_int16_t yy_chk[4078] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,   33,   24,    3,    3,   24,   33,    3,    3,
       13,   13,   13,   13,   14,   14,   14,   14,   20,   20,
       20,   20, 1271,   13,   22,   22, 1270,   14,   22,   22,

       31,   20,   22,   33,    3,    4,    4,    4,    4,    4,
        4,   26, 1269,    4,    4,   31,   30,    4,    4,   21,
       21,   21,   21,   28,   28,   26, 1266,   58,   26,   30,
       58,   29,   21,   34, 1265,   28,   29,   76,   28,   30,
       29,   31,   34,    4,    5,    5,    5,    5,    5,    5,
       28,   26,    5,    5,   26,   30,    5,    5,   32,   37,
       36,   28,   29,   76,   28,   30,   29,   78,   34,   35,
     1264,   32,   32,   38,   35,   36,   37,   81,   38,   82,
       36, 1259,    5,    6,    6,    6,    6,    6,    6,   41,
       41,    6,    6,   78, 1255,    6,    6,   32,   32, 1244,

       35,   36,   37,   81,   38,   82,   36,   45,   45,   45,
       45,   95,   98,   95,   95,   98,   41,  518, 1242,  518,
       45,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   48,   48,
       40,   40,   48,   48,   79,   40,   48,   11,   11,   40,
       11,   11,   11,   83,   79,   84,   11,   40,   11,   11,
       11,   80,   80,   11,   11,   11,   11,   40, 1239,  103,
       79,   40,  103, 1232,   11,   40,   11,   11,   11,   83,

       79,   84,   11,   40,   11,   11,   11,   80,   80,   11,
       11,   11,   11,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       19,   19,   19,   42, 1229,   19,   85,  105,  125,   19,
       42,  125,   19,   19,  108,   19,   19,   19,   19,  109,

      110,   19, 1218,   19,   19,   19,   19, 1216,   19,   19,
       19,   19,   85,  105,   19,   46,   46,   46,   46,   19,
      108,   19,   19,   19,   19,  109,  110,   19,   46,   19,
       19,   19,   19,   39,   19,   19,   19,   19,   39, 1214,
       19,   42,  111,   19,   47,   47,   47,   47,   39,  112,
       87,   63,   39,   39,   87,   63, 1213,   47,   51,   51,
       51,   51,   63,  107,   39,   63, 1210,  107,  111,  113,
     1206,   51,   64,  115,   39,  112,   87,   63,   39,   39,
       87,   63,   93,   64,   93,   93,   64,  170,   63,  107,
      170,   63,   93,  107,   64,  113,   51,   55,   64,  115,

       55, 1200, 1195,   88,   88,   88,   88,   55,  116,   64,
      119,   65,   64,   55,   55,   55,   88,  132,  132,   55,
       64,   55,   65,   55,   65,   65,   55,   55,   55,   55,
       89,   89,   89,   89,  116,   96,  119,   65,   96,   55,
       55,   55,   96,   89,  132,   55, 1188,   55,   65,   55,
       65,   65,   55,   55,   55,   55,   61,   61, 1185, 1182,
       61,   61,   61,   61,   61,   61,   61,   66,   61,   61,
      130,   66,   67,   68,   71,  117,   67,  130,   66,  145,
       77,   66,   71,   67,   68,   71,   67,   68,   71,   68,
      117,   77,  145,   66,   77,   96,   61,   66,   67,   68,

       71,  117,   67,  130,   66, 1181,   77,   66,   71,   67,
       68,   71,   67,   68,   71,   68,  117,   77,  145, 1179,
       77,   61,   62,   62, 1177, 1176,   62,   62,   62,   62,
       62,   62,   62, 1174,   62,   62,  129,   62,   69,  129,
       86, 1170,   69,   91,   91,   91,   91, 1167,   62,   69,
       86,   62,   69,  136,   86,   86,   91,  101,  101,  101,
      101, 1162,   62,   62,   69,  129,   86,  114,   69,  136,
      101,  106,  114,  135,   62,   69,   86,   62,   69,  138,
       86,   86,  106,  134,  131,  106, 1159,   62,   70,  134,
      172,  135,   70,  114,  138,  136,  118,  106,  114,   70,

      118,  134,   70,  131,  118,  123,  123,   70,  106,  123,
      123,  106,  118,  123,   70,  134,  172,  135,   70,  133,
      138, 1158,  118,  133,  141,   70,  118,  134,   70,  131,
      118, 1155, 1153,   70,   74,  133,  181,   74,  118,  181,
      121,  121,  121,  121,  122,  122,  122,  122,  141,  133,
       74,   74,   74,  121,  137,  137,   74,  122,   74,  173,
       74,  133,  140,   74,   74,   74,   74,  124,  124,  124,
      124,  139,  139, 1152,  141,  143,   74,   74,   74,  142,
      140,  137,   74,  144,   74,  173,   74,  146,  150,   74,
       74,   74,   74,  142,  143,  147,  146,  142,  139,  147,

      148,  156,  144,  148,  149,  150,  140,  147,  174,  153,
      149,  151,  175,  151,  147,  152,  154,  152,  156,  142,
      143,  153,  146,  142,  151,  147,  176,  151,  144,  148,
     1150,  150,  155,  147,  174,  154,  149,  155,  175,  151,
      147,  163,  163,  152,  156,  163,  163,  153,  653,  163,
      151,  653,  176,  151,  160,  160,  160,  160,  177, 1140,
      178,  154,  180,  155,  162,  162,  162,  162,  164,  164,
      164,  164,  165,  165,  165,  165,  171,  162,  179,  200,
     1132,  164,  201,  183,  177,  165,  178,  171,  180,  184,
      171, 1129,  202,  179,  183, 1126,  235,  183,  235,  235,

      184, 1125,  171,  184,  179,  200,  164,  184,  201,  183,
      185,  188, 1123,  171,  203,  184,  171,  186,  202,  179,
      183,  185,  188,  183,  185,  188,  184,  187,  186,  184,
     1120,  186,  186,  184,  204,  189,  185,  188,  187,  205,
      203,  187, 1119,  186,  187,  190,  189,  185,  188,  189,
      185,  188,  189,  187,  186,  191,  190,  186,  186,  190,
      204,  189, 1115,  206,  187,  205,  191,  187,  190,  191,
      187,  190,  189,  191, 1113,  189,  192,  193,  189, 1112,
      193,  191,  190,  720,  192,  190,  720,  192,  193,  206,
      192,  193,  191,  196,  190,  191,  209,  208,  194,  191,

      194,  208,  192,  193,  196,  207,  193,  196,  210,  194,
      192,  196,  194,  192,  193,  211,  192,  193,  199,  196,
      207,  213,  209,  208,  194, 1100,  194,  208,  214,  199,
      196,  207,  199,  196,  210,  194,  212,  196,  194,  195,
      195,  211,  215,  216,  199,  217,  207,  213,  212,  218,
      195,  195,  219,  195,  214,  199,  220,  221,  199,  222,
      223,  224,  212,  225,  227,  195,  195,  222,  215,  216,
      226,  217,  228, 1093,  212,  218,  195,  195,  219,  195,
     1086,  226,  220,  221,  226,  222,  223,  224,  236,  225,
      227,  236,  239,  222,  240,  236,  226,  241,  228,  229,

      229,  229,  229,  232,  232,  232,  232,  226,  244,  245,
      226,  234,  229,  234,  234,  242,  232,  243,  239,  246,
      240,  234,  269,  241,  247,  248,  249,  242,  250,  243,
      251,  252,  253,  298,  244,  245,  255,  257,  256,  258,
      259,  242,  260,  243,  261,  246,  269,  298,  236,  256,
      247,  248,  249,  242,  250,  243,  251,  252,  253,  254,
      265,  264,  255,  257,  256,  258,  259,  254,  260,  264,
      261,  267,  269,  298,  254,  256,  262,  262,  262,  262,
      265,  266,  268,  270,  275,  254,  266,  268,  271,  267,
      273,  271,  270,  254,  272,  264,  274,  272,  273,  279,

      254,  276,  277,  275,  278,  283,  265,  283,  276,  274,
      279,  280,  266,  268,  281,  267,  284,  271,  270,  285,
      282,  277,  281,  272,  273,  282,  278,  288,  285,  275,
      280,  286,  286,  283,  276,  274,  279,  284,  289,  287,
      290,  294,  291, 1073,  305,  293,  288,  277,  281,  292,
      293,  282,  278,  294,  285,  290,  280,  289,  286,  287,
      291,  295,  292,  284,  297,  296,  295,  306,  307,  297,
      305,  529,  288,  529,  308,  309,  293,  296,  310,  294,
      311,  290,  312,  289,  313,  287,  291, 1070,  292,  315,
      317,  316,  295,  306,  307,  297,  302,  302,  302,  302,

      308,  309,  316,  296,  310,  314,  311,  318,  312,  319,
      313,  318, 1067,  314,  335,  315,  317,  316,  318, 1065,
      319,  318,  530,  319,  530,  335,  319,  320,  316, 1063,
      334,  314,  336,  318,  321,  319,  321,  318,  320,  314,
      335,  320,  334,  322,  318,  321,  319,  318,  321,  319,
      320,  335,  319,  320,  322,  322,  334,  322,  336,  323,
      321,  324,  321,  337,  320,  338,  339,  320,  334,  322,
      323,  321,  324,  323,  321,  324,  320,  323,  340,  325,
      322,  322,  324,  322,  341,  323,  325,  324, 1060,  337,
      325,  338,  339,  325, 1059,  326,  323,  342,  324,  323,

      343,  324, 1054,  323,  340,  325,  326,  344,  324,  326,
      341,  345,  325,  328,  327,  326,  325,  346, 1051,  325,
      329,  326,  327,  342,  328,  327,  343,  328,  327, 1050,
     1047,  329,  326,  344,  329,  326, 1044,  345,  329,  328,
      327,  326,  347,  346,  330,  332,  329, 1041,  327,  348,
      328,  327,  349,  328,  327,  330,  332,  329,  330,  332,
      329,  330,  331,  350,  329,  351,  352,  353,  347,  354,
      330,  332,  355,  331,  331,  348,  331,  356,  349,  357,
      358,  330,  332,  359,  330,  332,  360,  330,  331,  350,
      363,  351,  352,  353,  364,  354,  365,  366,  355,  331,

      331,  367,  331,  356,  368,  357,  358,  369,  370,  359,
      371,  372,  360,  373,  374,  375,  363,  376,  377,  378,
      364,  379,  365,  366,  380,  381,  382,  367,  383,  384,
      368,  385,  386,  369,  370,  387,  371,  372,  388,  373,
      374,  375,  389,  376,  377,  378,  390,  379,  392,  393,
      380,  381,  382,  394,  383,  384,  395,  385,  386,  398,
      394,  387,  393,  392,  388,  397,  399,  400,  389,  401,
      401,  403,  390,  398,  395,  402,  404,  406,  397,  405,
      405,  404,  409,  399,  413,  403,  394,  400,  393,  392,
      411,  402,  406,  412,  412,  411,  401,  409,  415,  398,

      395,  413,  418,  414,  397,  416,  405,  404, 1037,  399,
      428,  403,  421,  400,  416,  415,  418,  402,  406,  422,
      412,  411,  414,  409,  422,  419,  423,  413,  419,  421,
      419,  420,  420,  424,  426,  429,  428,  430,  424,  431,
      416,  415,  418,  426,  432,  423,  433,  434,  414,  435,
      422,  436,  437,  438,  419,  421,  419,  439,  420,  440,
      441,  429,  442,  430,  424,  431,  532, 1032,  532,  426,
      432,  423,  433,  434, 1027,  435,  443,  436,  437,  438,
      444,  445,  443,  439,  458,  440,  441,  443,  442,  446,
      443,  444,  445,  445,  444,  445,  763,  444,  448,  763,

      446,  459,  443,  446, 1020,  446,  444,  445,  443,  448,
      458, 1018,  448,  443,  449,  446,  443,  444,  445,  445,
      444,  445,  447,  444,  448,  449,  446,  459,  449,  446,
      450,  446,  451,  447,  460,  448,  447,  447,  448,  452,
      449,  450, 1007,  451,  450,  539,  451,  539,  447,  989,
      452,  449,  461,  452,  449,  452,  450,  453,  451,  447,
      460,  984,  447,  447,  462,  452,  454,  450,  453,  451,
      450,  453,  451,  456,  454,  453,  452,  454,  461,  452,
      454,  452,  455,  453,  456,  463,  455,  456,  465,  466,
      462,  457,  454,  455,  453,  457,  455,  453,  467,  456,

      454,  453,  457,  454,  468,  457,  454,  469,  455,  470,
      456,  463,  455,  456,  465,  466,  471,  457,  473,  455,
      474,  457,  455,  475,  467,  476,  477,  479,  457,  481,
      468,  457,  480,  469,  480,  470,  482,  483,  484,  485,
      486,  487,  471,  489,  473,  490,  474,  491,  492,  475,
      493,  476,  477,  479,  494,  481,  495,  496,  480,  498,
      480,  500,  482,  483,  484,  485,  486,  487,  501,  489,
      502,  490,  503,  491,  492,  504,  493,  505,  506,  507,
      494,  508,  495,  496,  509,  498,  510,  500,  512,  514,
      515,  983,  519,  516,  501,  515,  502,  519,  503,  522,

      517,  504,  520,  505,  506,  507,  514,  508,  516,  521,
      509,  520,  510,  517,  512,  523,  524,  522,  521,  517,
      525,  515,  527,  519,  528,  531,  535,  534,  524,  531,
      533,  535,  514,  523,  516,  525,  527,  520,  537,  517,
      548,  528,  548,  522,  521,  517,  534,  533,  536,  538,
      544,  540,  537,  536,  524,  531,  546,  535,  540,  523,
      541,  525,  527,  542,  538,  543,  542,  528,  544,  549,
      550,  551,  534,  533,  552,  553,  554,  541,  537,  536,
      546,  555,  543,  549,  540,  556,  557,  558,  559,  560,
      538,  561,  542,  562,  544,  563,  550,  551,  564,  581,

      552,  553,  554,  541,  982,  582,  546,  555,  543,  549,
      585,  556,  557,  558,  559,  560,  565,  561,  583,  562,
      584,  563,  567,  585,  564,  581,  567,  565,  980,  585,
      565,  582,  639,  567,  639,  587,  567,  588,  589,  590,
      569,  592,  565,  650,  583,  650,  584,  593,  567,  585,
      979,  569,  567,  565,  569,  585,  565,  566,  566,  567,
      568,  587,  567,  588,  589,  590,  569,  592,  568,  566,
      566,  568,  566,  593,  568,  595,  566,  569,  570,  978,
      569,  596,  597,  669,  566,  669,  568,  598,  599,  570,
      775,  570,  570,  775,  568,  566,  566,  568,  566,  977,

      568,  595,  566,  976,  570,  571,  601,  596,  597,  572,
      602,  573,  572,  598,  599,  570,  571,  570,  570,  571,
      572,  571,  573,  572,  671,  573,  671,  974,  603,  573,
      574,  571,  601,  972,  574,  572,  602,  573,  572,  575,
      971,  574,  571,  575,  574,  571,  572,  571,  573,  572,
      575,  573,  576,  575,  603,  573,  574,  577,  604,  577,
      574,  578,  605,  576,  606,  575,  576,  574,  577,  575,
      574,  577,  578,  608,  609,  578,  575,  578,  576,  575,
      612,  579,  579,  577,  604,  577,  613,  578,  605,  576,
      606,  610,  576,  579,  577,  614,  579,  577,  578,  608,

      609,  578,  615,  578,  610,  616,  612,  617,  579,  618,
      610,  619,  613,  621,  623,  624,  625,  626,  627,  579,
      628,  614,  579,  629,  630,  632,  635,  640,  615,  963,
      610,  616,  640,  617,  637,  618,  610,  619,  638,  621,
      623,  624,  625,  626,  627,  641,  628,  643,  637,  629,
      630,  632,  635,  642,  642,  638,  642,  644,  640,  645,
      646,  647,  641,  648,  649,  962,  643,  652,  648,  651,
      647,  652,  651,  661,  637,  645,  644,  957,  646,  712,
      712,  638,  712,  649,  654,  654,  654,  654,  641,  660,
      657,  661,  643,  660,  648,  657,  647,  652,  651,  662,

      659,  645,  644,  659,  646,  656,  656,  656,  656,  649,
      658,  665,  666,  662,  667,  658,  670,  661,  954,  660,
      665,  657,  663,  663,  663,  663,  674,  668,  676,  659,
      668,  666,  670,  672,  672,  672,  672,  673,  667,  662,
      675,  658,  677,  678,  673,  679,  665,  680,  681,  682,
      683,  684,  674,  675,  676,  685,  668,  666,  670,  675,
      686,  687,  738,  738,  667,  738,  953,  943,  677,  678,
      673,  679,  941,  680,  681,  682,  683,  684,  689,  675,
      707,  685,  693,  709,  691,  675,  686,  687,  691,  689,
      710,  692,  689,  693,  689,  691,  693,  760,  691,  760,

      693,  711,  692,  940,  689,  692,  707,  692,  693,  709,
      691,  780,  938,  780,  691,  689,  710,  692,  689,  693,
      689,  691,  693,  694,  691,  695,  693,  711,  692,  695,
      696,  692,  696,  692,  694,  713,  695,  694,  694,  695,
      714,  696,  715,  697,  696,  716,  697,  766,  766,  694,
      766,  695,  936,  927,  697,  695,  696,  697,  696,  925,
      694,  713,  695,  694,  694,  695,  714,  696,  715,  697,
      696,  716,  697,  698,  698,  699,  700,  718,  700,  699,
      697,  701,  719,  697,  701,  698,  699,  700,  698,  699,
      700,  778,  701,  924,  778,  701,  789,  722,  789,  723,

      698,  699,  700,  718,  700,  699,  702,  701,  719,  922,
      701,  698,  699,  700,  698,  699,  700,  702,  701,  702,
      702,  701,  703,  722,  704,  723,  724,  725,  726,  726,
      726,  726,  702,  703,  728,  704,  703,  729,  704,  730,
      703,  731,  732,  702,  733,  702,  702,  704,  703,  734,
      704,  736,  724,  725,  737,  739,  740,  741,  742,  703,
      728,  704,  703,  729,  704,  730,  703,  731,  732,  743,
      733,  744,  745,  704,  746,  734,  748,  736,  749,  750,
      737,  739,  740,  741,  742,  751,  752,  753,  754,  755,
      757,  759,  762,  790,  897,  743,  897,  744,  745,  761,

      746,  762,  748,  764,  749,  750,  770,  796,  772,  790,
      796,  751,  752,  753,  754,  755,  757,  759,  761,  765,
      768,  769,  764,  771,  765,  770,  772,  762,  768,  773,
      769,  774,  771,  776,  784,  790,  774,  799,  776,  779,
      779,  779,  779,  793,  761,  782,  791,  773,  764,  782,
      765,  770,  772,  784,  768,  791,  769,  900,  771,  900,
      793,  921,  774,  799,  776,  781,  781,  781,  781,  788,
      788,  788,  788,  773,  800,  782,  801,  802,  803,  784,
      804,  791,  794,  794,  794,  794,  793,  795,  797,  797,
      797,  797,  795,  805,  806,  808,  809,  810,  811,  812,

      800,  813,  801,  802,  803,  815,  804,  830,  815,  911,
      830,  831,  831,  832,  831,  834,  901,  816,  795,  805,
      806,  808,  809,  810,  811,  812,  814,  813,  816,  837,
      837,  816,  837,  835,  814,  816,  894,  814,  836,  832,
      814,  834,  817,  816,  818,  839,  817,  843,  840,  893,
      843,  818,  814,  817,  816,  818,  817,  816,  818,  835,
      814,  816,  819,  814,  836,  841,  814,  842,  817,  892,
      818,  839,  817,  819,  840,  820,  819,  818,  883,  817,
      819,  818,  817,  821,  818,  844,  820,  821,  819,  820,
      881,  841,  820,  842,  821,  822,  822,  821,  848,  819,

      879,  820,  819,  825,  824,  824,  819,  822,  877,  821,
      822,  844,  820,  821,  825,  820,  824,  825,  820,  824,
      821,  825,  822,  821,  848,  846,  826,  826,  846,  825,
      853,  824,  876,  822,  827,  827,  822,  854,  826,  875,
      825,  826,  824,  825,  828,  824,  827,  825,  856,  827,
      829,  829,  828,  826,  857,  828,  853,  858,  828,  859,
      860,  827,  829,  854,  826,  829,  882,  826,  873,  882,
      828,  861,  827,  871,  856,  827,  863,  829,  828,  864,
      857,  828,  865,  858,  828,  859,  860,  866,  829,  867,
      868,  829,  851,  851,  851,  851,  869,  861,  862,  862,

      872,  862,  863,  874,  878,  864,  880,  884,  865,  886,
      888,  885,  884,  866,  885,  867,  868,  886,  887,  889,
      891,  870,  869,  887,  890,  888,  872,  896,  895,  874,
      878,  895,  880,  890,  889,  891,  898,  907,  884,  898,
      896,  899,  902,  886,  902,  903,  904,  903,  904,  887,
      906,  888,  907,  899,  905,  905,  905,  905,  909,  890,
      889,  891,  908,  914,  908,  912,  896,  909,  912,  906,
      910,  910,  910,  910,  913,  915,  913,  916,  907,  899,
      917,  918,  919,  920,  923,  926,  928,  855,  929,  914,
      928,  929,  986,  909,  986,  906,  937,  928,  852,  937,

      928,  915,  944,  916,  850,  944,  917,  918,  919,  920,
      923,  926,  928,  930,  931,  946,  928,  948,  931,  932,
      930,  933,  949,  928,  930,  931,  928,  930,  931,  933,
      932,  947,  933,  932,  947,  933,  849,  934,  934,  930,
      931,  946,  847,  948,  931,  932,  930,  933,  949,  934,
      930,  931,  934,  930,  931,  933,  932,  935,  933,  932,
      950,  933,  939,  939,  934,  942,  951,  952,  935,  935,
      955,  935,  956,  955,  939,  934,  942,  939,  934,  942,
      845,  945,  945,  935,  945,  959,  950,  960,  961,  939,
      964,  942,  951,  952,  935,  935,  965,  935,  956,  966,

      939,  967,  942,  939,  968,  942,  958,  958,  958,  958,
      969,  959,  970,  960,  961,  973,  964,  975,  981,  987,
      985,  991,  965,  985,  988,  966,  993,  967,  990,  997,
      968,  992,  990, 1000,  997,  991,  969,  987,  970,  988,
      993,  973, 1000,  975,  981,  994,  992,  994,  995,  996,
      995,  996,  998,  999, 1001,  998,  999, 1001,  990,  838,
      997,  991, 1002,  987, 1002,  988,  993, 1003, 1000,  833,
     1003, 1008,  992, 1004, 1004, 1004, 1004, 1005, 1010, 1013,
     1005, 1006, 1006, 1006, 1006, 1008, 1009, 1014, 1011, 1009,
     1011, 1015, 1016, 1017, 1010, 1012, 1012, 1012, 1012, 1019,

     1021, 1029,  823, 1030, 1029, 1013, 1030,  807,  798, 1031,
     1022, 1008, 1031, 1014, 1069,  792, 1069, 1015, 1016, 1017,
     1010, 1022,  787, 1023, 1022, 1019, 1021, 1022, 1024, 1024,
     1025, 1026, 1033, 1025, 1023, 1033, 1022, 1023, 1039,  786,
     1024, 1025, 1026, 1024, 1025, 1026,  785, 1022, 1034, 1023,
     1022, 1034, 1040, 1022, 1042, 1024, 1025, 1026, 1043, 1025,
     1023, 1028, 1045, 1023, 1039, 1028, 1024, 1025, 1026, 1024,
     1025, 1026, 1028, 1036, 1038, 1028, 1036, 1038, 1040, 1035,
     1042, 1048, 1049, 1052, 1043, 1053, 1055, 1028, 1045, 1056,
     1035, 1028, 1035, 1035, 1046, 1046, 1046, 1046, 1028, 1057,

     1058, 1028, 1061, 1062, 1064, 1035,  783, 1048, 1049, 1052,
     1066, 1053, 1055, 1066, 1077, 1056, 1035, 1068, 1035, 1035,
     1071, 1068, 1072,  777, 1078, 1057, 1058, 1078, 1061, 1062,
     1064,  767, 1071, 1077, 1079, 1091, 1072, 1074, 1074, 1074,
     1074, 1075, 1075, 1075, 1075,  758,  756, 1068, 1076, 1076,
     1076, 1076, 1079, 1080, 1081, 1088, 1080, 1081, 1071, 1077,
     1082, 1091, 1072, 1082, 1083, 1083, 1083, 1083, 1084, 1092,
     1085, 1084, 1085, 1087, 1088, 1094, 1087, 1095, 1079, 1089,
     1089, 1096, 1089, 1090, 1090, 1090, 1090, 1097, 1114, 1105,
     1098, 1098, 1105, 1106,  747, 1092, 1106, 1101, 1101, 1116,

     1088, 1094, 1098, 1095,  735, 1098, 1118, 1096, 1099, 1101,
      727, 1099, 1101, 1097, 1114, 1107, 1102, 1098, 1107, 1099,
     1108, 1121, 1099, 1108, 1101, 1116,  721, 1102, 1098, 1102,
     1102, 1098, 1118, 1109, 1099, 1101, 1109, 1099, 1101,  717,
     1124, 1111, 1102, 1104, 1111, 1099,  708, 1121, 1099, 1103,
     1103, 1103, 1103, 1102, 1104, 1102, 1102, 1104, 1110, 1110,
     1127, 1104, 1117, 1117, 1117, 1117, 1124, 1128, 1130, 1104,
     1110, 1122, 1122, 1110, 1122, 1131, 1133, 1133, 1134, 1133,
     1104, 1134, 1135, 1104, 1135, 1110, 1127, 1104, 1136, 1137,
     1145, 1139, 1137, 1128, 1130, 1138, 1110, 1138, 1145, 1110,

     1139, 1131, 1141, 1146, 1141,  706, 1136, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1149,
     1147, 1149, 1146, 1147, 1145, 1148, 1139, 1154, 1148, 1156,
     1151, 1151, 1136, 1151, 1157, 1160, 1161, 1166,  705, 1161,
     1166, 1169, 1163, 1163, 1168, 1168, 1160, 1168, 1146, 1160,
     1172, 1178, 1160, 1154, 1163, 1156, 1192, 1163, 1192, 1165,
     1157, 1160, 1164, 1164, 1164, 1164, 1165, 1169, 1180, 1163,
     1165, 1183, 1160, 1165,  690, 1160, 1172, 1178, 1160, 1184,
     1163, 1175, 1175, 1163, 1175, 1165, 1171, 1171, 1171, 1171,
     1186, 1186, 1165, 1186, 1180, 1187, 1165, 1183, 1187, 1165,

     1173, 1173, 1173, 1173, 1189, 1184, 1190, 1189, 1191, 1190,
     1193, 1193, 1193, 1193, 1194, 1196, 1197, 1199, 1196, 1197,
     1198, 1201, 1198, 1207, 1202, 1204, 1191, 1202, 1204, 1194,
     1203, 1203, 1205, 1208, 1207, 1205, 1208, 1207, 1209, 1209,
     1211, 1209, 1203, 1199, 1215, 1203, 1222, 1201, 1219, 1207,
     1217, 1219, 1191,  688, 1220, 1194, 1220, 1203, 1221,  664,
     1207, 1221, 1226, 1207, 1226, 1222, 1211, 1230, 1203,  655,
     1215, 1203, 1212, 1212, 1212, 1212, 1217, 1223, 1223, 1223,
     1223, 1224, 1224, 1224, 1224, 1225, 1237, 1227, 1240, 1225,
     1227, 1222, 1228, 1230, 1231, 1228, 1233, 1231, 1241, 1233,

     1234, 1234, 1234, 1234, 1236, 1235, 1248, 1236, 1235, 1248,
      636, 1246, 1237, 1249, 1240, 1225, 1235, 1253, 1256, 1235,
     1238, 1238, 1238, 1238, 1241, 1243, 1243, 1243, 1243, 1246,
     1258, 1235, 1258,  634, 1235, 1245, 1245, 1245, 1245, 1249,
     1261,  633, 1235, 1253, 1256, 1235, 1247, 1247, 1247, 1247,
     1250, 1250, 1250, 1250, 1252, 1246, 1251, 1251, 1251, 1251,
     1254, 1254, 1254, 1254,  631, 1252, 1261, 1268, 1252, 1268,
      622, 1252, 1257, 1257, 1257, 1257, 1260, 1260, 1260, 1260,
     1252, 1262, 1262, 1262, 1262,  620, 1263, 1263,  611,  607,
      600, 1252,  594,  591, 1252,  586,  580, 1252, 1263,  547,

      545, 1263, 1267, 1267, 1267, 1267, 1272, 1272, 1272, 1272,
      526,  511,  499, 1263, 1273, 1273, 1273, 1273, 1274, 1274,
     1274, 1274,  497,  488, 1263,  478,  472, 1263, 1275, 1275,
     1275, 1275, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1279, 1279, 1280,  464,  425,
     1280, 1280, 1280,  417, 1280, 1281, 1281,  410, 1281,  408,
     1281,  407, 1281, 1282, 1282,  396, 1282,  304, 1282,  263,
     1282, 1283, 1283, 1283,  237, 1283, 1283, 1283, 1283, 1283,
     1284,  233, 1284, 1285,  230,  197, 1285,  182, 1285,  167,
     1285, 1285,  166,  159,  158,  157,  128,  127,  120,  104,

      102,   90,   72,   59,   49,   43,   27,   25,   23,   17,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[108] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
    1, 1, 1, 1, 1, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int scdoc_flex_debug;
int scdoc_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scdoctext;
#line 1 "SCDoc.l"
#line 2 "SCDoc.l"
/************************************************************************
*
* Copyright 2012 Jonatan Liljedahl <lijon@kymatica.com>
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
************************************************************************/

#include <string.h>
#include "SCDoc.h"
#include "SCDoc.tab.hpp"

int scdoc_start_token = 0;
//int colnum;
//#define YY_USER_ACTION { scdoclloc.first_column = colnum; colnum=colnum+scdocleng; scdoclloc.last_column=colnum; if(scdoclloc.first_line!=scdoclineno) colnum=1; scdoclloc.first_line = scdoclloc.last_line = scdoclineno;}

static int method_caller;

#define YY_NO_UNISTD_H 1







#line 1853 "lex.scdoc.cpp"

#define INITIAL 0
#define verbatim 1
#define verbatim2 2
#define metadata 3
#define eat 4
#define eat2 5
#define eat3 6
#define method 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scdoclex_destroy (void );

int scdocget_debug (void );

void scdocset_debug (int debug_flag  );

YY_EXTRA_TYPE scdocget_extra (void );

void scdocset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scdocget_in (void );

void scdocset_in  (FILE * in_str  );

FILE *scdocget_out (void );

void scdocset_out  (FILE * out_str  );

yy_size_t scdocget_leng (void );

char *scdocget_text (void );

int scdocget_lineno (void );

void scdocset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scdocwrap (void );
#else
extern int scdocwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scdoctext, scdocleng, 1, scdocout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scdocin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scdocin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scdocin))==0 && ferror(scdocin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scdocin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scdoclex (void);

#define YY_DECL int scdoclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scdoctext and scdocleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 45 "SCDoc.l"




if (scdoc_start_token) {
    int t = scdoc_start_token;
    scdoc_start_token = 0;
//    colnum = 1;
    if(t==START_METADATA) BEGIN(eat);
    return t;
}



#line 2057 "lex.scdoc.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scdocin )
			scdocin = stdin;

		if ( ! scdocout )
			scdocout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scdocensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scdoc_create_buffer(scdocin,YY_BUF_SIZE );
		}

		scdoc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scdoctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1278 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1277 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < scdocleng; ++yyl )
				if ( scdoctext[yyl] == '\n' )
					   
    scdoclineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "SCDoc.l"
return CLASS;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "SCDoc.l"
return TITLE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "SCDoc.l"
return SUMMARY;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "SCDoc.l"
return RELATED;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "SCDoc.l"
return CATEGORIES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "SCDoc.l"
return REDIRECT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "SCDoc.l"
return CLASSTREE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "SCDoc.l"
return KEYWORD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "SCDoc.l"
return PRIVATE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "SCDoc.l"
return SECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "SCDoc.l"
return SUBSECTION;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "SCDoc.l"
return COPYMETHOD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "SCDoc.l"
return ARGUMENT;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 76 "SCDoc.l"
return DESCRIPTION;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 77 "SCDoc.l"
return CLASSMETHODS;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 78 "SCDoc.l"
return INSTANCEMETHODS;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 79 "SCDoc.l"
return EXAMPLES;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 81 "SCDoc.l"
return RETURNS;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 82 "SCDoc.l"
return DISCUSSION;
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 84 "SCDoc.l"
return LIST;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 85 "SCDoc.l"
return TREE;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 86 "SCDoc.l"
return NUMBEREDLIST;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 87 "SCDoc.l"
return DEFINITIONLIST;
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 88 "SCDoc.l"
return TABLE;
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 89 "SCDoc.l"
return FOOTNOTE;
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 90 "SCDoc.l"
return WARNING;
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 91 "SCDoc.l"
return NOTE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "SCDoc.l"
BEGIN(verbatim); return LINK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "SCDoc.l"
BEGIN(verbatim); return ANCHOR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "SCDoc.l"
BEGIN(verbatim); return IMAGE;
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 96 "SCDoc.l"
BEGIN(verbatim); return SOFT;
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 97 "SCDoc.l"
BEGIN(verbatim); return STRONG;
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 98 "SCDoc.l"
BEGIN(verbatim); return EMPHASIS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "SCDoc.l"
BEGIN(verbatim); return CODE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "SCDoc.l"
BEGIN(verbatim); return TELETYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "SCDoc.l"
BEGIN(verbatim); return SUPERSCRIPT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "SCDoc.l"
BEGIN(verbatim); return SUBSCRIPT;
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 104 "SCDoc.l"
BEGIN(verbatim2); return CODEBLOCK;
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 105 "SCDoc.l"
BEGIN(verbatim2); return TELETYPEBLOCK;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 107 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 108 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 109 "SCDoc.l"
scdoclval.str = strdup("\n::"); return TEXT;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 110 "SCDoc.l"
return BARS;
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 111 "SCDoc.l"
return HASHES;
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 113 "SCDoc.l"
scdoclval.str = strdup("\n"); return TEXT;
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 114 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 115 "SCDoc.l"
return NEWLINE;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 116 "SCDoc.l"
return EMPTYLINES;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "SCDoc.l"
scdoclval.str = strdup("||"); return TEXT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "SCDoc.l"
scdoclval.str = strdup("##"); return TEXT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 122 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 123 "SCDoc.l"
scdoclval.str = strdup("    "); return TEXT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 124 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "SCDoc.l"
/* eat this */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return URL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 129 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODNAME;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 130 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODARGS;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 131 "SCDoc.l"
/* eat this */
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 132 "SCDoc.l"
BEGIN(method_caller); return NEWLINE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 133 "SCDoc.l"
return BAD_METHODNAME;
	YY_BREAK
case 63:
#line 136 "SCDoc.l"
case 64:
#line 137 "SCDoc.l"
case 65:
#line 138 "SCDoc.l"
case 66:
#line 139 "SCDoc.l"
case 67:
YY_RULE_SETUP
#line 139 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "SCDoc.l"
BEGIN(metadata); return CLASS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "SCDoc.l"
BEGIN(metadata); return TITLE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 143 "SCDoc.l"
BEGIN(metadata); return SUMMARY;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "SCDoc.l"
BEGIN(metadata); return RELATED;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "SCDoc.l"
BEGIN(metadata); return CATEGORIES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "SCDoc.l"
BEGIN(metadata); return REDIRECT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "SCDoc.l"
BEGIN(metadata); return CLASSTREE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "SCDoc.l"
BEGIN(metadata); return KEYWORD;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "SCDoc.l"
BEGIN(metadata); return PRIVATE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "SCDoc.l"
BEGIN(metadata); return SECTION;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "SCDoc.l"
BEGIN(metadata); return SUBSECTION;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 152 "SCDoc.l"
BEGIN(metadata); return COPYMETHOD;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 153 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 154 "SCDoc.l"
BEGIN(eat); return DESCRIPTION;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 155 "SCDoc.l"
BEGIN(eat); return CLASSMETHODS;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 156 "SCDoc.l"
BEGIN(eat); return INSTANCEMETHODS;
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 157 "SCDoc.l"
BEGIN(eat); return EXAMPLES;
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 158 "SCDoc.l"
BEGIN(eat); return NEWLINE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 87:
#line 161 "SCDoc.l"
case 88:
#line 162 "SCDoc.l"
case 89:
#line 163 "SCDoc.l"
case 90:
YY_RULE_SETUP
#line 163 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 164 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 165 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 166 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 167 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 168 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 169 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 170 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 171 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 172 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 173 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 174 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 175 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 176 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 177 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 178 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 179 "SCDoc.l"
/* empty */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "SCDoc.l"
ECHO;
	YY_BREAK
#line 2705 "lex.scdoc.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(verbatim):
case YY_STATE_EOF(verbatim2):
case YY_STATE_EOF(metadata):
case YY_STATE_EOF(eat):
case YY_STATE_EOF(eat2):
case YY_STATE_EOF(eat3):
case YY_STATE_EOF(method):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scdocin at a new source and called
			 * scdoclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scdocin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scdocwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scdoctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scdoclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					scdocrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scdocrestart(scdocin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scdocrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1278 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1278 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1277);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scdoctext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --scdoclineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scdocrestart(scdocin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scdocwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scdoctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    scdoclineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scdocrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scdocensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scdoc_create_buffer(scdocin,YY_BUF_SIZE );
	}

	scdoc_init_buffer(YY_CURRENT_BUFFER,input_file );
	scdoc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scdoc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scdocpop_buffer_state();
	 *		scdocpush_buffer_state(new_buffer);
     */
	scdocensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scdoc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scdocwrap()) processing, but the only time this flag
	 * is looked at is after scdocwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scdoc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scdocin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scdoc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scdocalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scdoc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scdoc_create_buffer()
 * 
 */
    void scdoc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scdocfree((void *) b->yy_ch_buf  );

	scdocfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scdocrestart() or at EOF.
 */
    static void scdoc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scdoc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scdoc_init_buffer was _probably_
     * called from scdocrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scdoc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scdoc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scdocensure_buffer_stack();

	/* This block is copied from scdoc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scdoc_switch_to_buffer. */
	scdoc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scdocpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scdoc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scdoc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scdocensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scdoc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scdoc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scdoclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scdoc_scan_bytes() instead.
 */
YY_BUFFER_STATE scdoc_scan_string (yyconst char * yystr )
{
    
	return scdoc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scdoclex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scdoc_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scdocalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scdoc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scdoc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scdoctext[scdocleng] = (yy_hold_char); \
		(yy_c_buf_p) = scdoctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scdocleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scdocget_lineno  (void)
{
        
    return scdoclineno;
}

/** Get the input stream.
 * 
 */
FILE *scdocget_in  (void)
{
        return scdocin;
}

/** Get the output stream.
 * 
 */
FILE *scdocget_out  (void)
{
        return scdocout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scdocget_leng  (void)
{
        return scdocleng;
}

/** Get the current token.
 * 
 */

char *scdocget_text  (void)
{
        return scdoctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scdocset_lineno (int  line_number )
{
    
    scdoclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scdoc_switch_to_buffer
 */
void scdocset_in (FILE *  in_str )
{
        scdocin = in_str ;
}

void scdocset_out (FILE *  out_str )
{
        scdocout = out_str ;
}

int scdocget_debug  (void)
{
        return scdoc_flex_debug;
}

void scdocset_debug (int  bdebug )
{
        scdoc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scdoclex_destroy(), so don't allocate here.
     */

    /* We do not touch scdoclineno unless the option is enabled. */
    scdoclineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scdocin = stdin;
    scdocout = stdout;
#else
    scdocin = (FILE *) 0;
    scdocout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scdoclex_init()
     */
    return 0;
}

/* scdoclex_destroy is for both reentrant and non-reentrant scanners. */
int scdoclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scdoc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scdocpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scdocfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scdoclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scdocalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scdocrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scdocfree (void * ptr )
{
	free( (char *) ptr );	/* see scdocrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 180 "SCDoc.l"



